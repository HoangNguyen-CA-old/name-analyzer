{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","useState","name","age","count","details","setDetails","setName","Container","fluid","className","Row","Col","xs","onChange","event","target","value","Button","onClick","xhr","XMLHttpRequest","onload","this","status","response","JSON","parse","responseText","console","log","getResponseHeader","open","send","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gSA2DeA,G,MAvDF,WAAO,IAAD,EACWC,mBAAS,CAAEC,KAAM,GAAIC,IAAK,GAAIC,MAAO,KADhD,mBACZC,EADY,KACHC,EADG,OAEKL,mBAAS,SAFd,mBAEZC,EAFY,KAENK,EAFM,KAiCjB,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAO,EAAMC,UAAU,eAChC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACP,wBAAIH,UAAU,eAAd,qBACA,2BAAOI,SAnCE,SAAAC,GACfR,EAAQQ,EAAMC,OAAOC,QAkCcP,UAAU,cAEzC,kBAACE,EAAA,EAAD,CAAKC,GAAI,IACP,kBAACK,EAAA,EAAD,CAAQC,QAnCC,WACf,IAAIC,EAAM,IAAIC,eAGdD,EAAIE,OAAS,WACX,GAAoB,MAAhBC,KAAKC,OAAgB,CACvB,IAAIC,EAAWC,KAAKC,MAAMJ,KAAKK,cAC/BtB,EAAW,CACTJ,KAAMuB,EAASvB,KACfC,IAAKsB,EAAStB,IACdC,MAAOqB,EAASrB,QAElByB,QAAQC,IAAIP,KAAKQ,kBAAkB,6BAWvCX,EAAIY,KAAK,MAAT,oCAA6C9B,IAE7CkB,EAAIa,SAUE,YAEF,wBAAIvB,UAAU,kBACd,kBAACE,EAAA,EAAD,CAAKC,GAAI,IACP,wBAAIH,UAAU,0BAAd,WACA,qCAAWL,EAAQH,MACnB,oCAAUG,EAAQF,KAClB,2CAAiBE,EAAQD,YClCpB8B,MAdf,WACE,OACE,yBAAKxB,UAAU,uBACb,wBAAIA,UAAU,aAAd,iBACA,uBAAGA,UAAU,QAAb,0GAKA,kBAAC,EAAD,QCDcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4ec096ab.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Container, Row, Col } from 'react-bootstrap';\r\nimport '../styles/form.scss';\r\n\r\nconst Form = () => {\r\n  let [details, setDetails] = useState({ name: '', age: '', count: '' });\r\n  let [name, setName] = useState('hello');\r\n  let changeName = event => {\r\n    setName(event.target.value);\r\n  };\r\n  let getDetails = () => {\r\n    let xhr = new XMLHttpRequest();\r\n    //xhr.withCredentials = true;\r\n\r\n    xhr.onload = function() {\r\n      if (this.status === 200) {\r\n        let response = JSON.parse(this.responseText);\r\n        setDetails({\r\n          name: response.name,\r\n          age: response.age,\r\n          count: response.count\r\n        });\r\n        console.log(this.getResponseHeader('X-Rate-Limit-Remaining'));\r\n      }\r\n    };\r\n\r\n    /*\r\n    xhr.addEventListener('readystatechange', function() {\r\n      if (this.readyState === this.DONE) {\r\n      }\r\n    });\r\n    */\r\n\r\n    xhr.open('GET', `https://api.agify.io?name=${name}`);\r\n\r\n    xhr.send();\r\n  };\r\n  return (\r\n    <Container fluid={true} className='text-center'>\r\n      <Row>\r\n        <Col xs={12}>\r\n          <h4 className='text-danger'>Enter First Name:</h4>\r\n          <input onChange={changeName} className='p-1 mb-2'></input>\r\n        </Col>\r\n        <Col xs={12}>\r\n          <Button onClick={getDetails}>See Age</Button>\r\n        </Col>\r\n        <hr className='seperator m-3'></hr>\r\n        <Col xs={12}>\r\n          <h3 className='text-success display-4'>Results</h3>\r\n          <h5>Name: {details.name}</h5>\r\n          <h5>Age: {details.age}</h5>\r\n          <h5>Occurances: {details.count}</h5>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\nimport './App.scss';\nimport Form from './components/Form';\n\nfunction App() {\n  return (\n    <div className='wrapper text-center'>\n      <h1 className='display-3'>Age Predictor</h1>\n      <p className='lead'>\n        A simple application that predicts the age of a person based on their\n        first name using an external API\n      </p>\n\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}