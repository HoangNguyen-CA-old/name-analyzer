{"version":3,"sources":["contexts/InformationContext.js","components/Form.js","components/InformationModal.js","App.js","serviceWorker.js","index.js"],"names":["InformationContext","createContext","InformationProvider","props","useState","showInfo","setShowInfo","name","age","ageCount","gender","genderProbability","genderCount","country","info","setInfo","Provider","value","children","Form","useContext","inputRef","useRef","getInput","current","Container","fluid","className","id","Row","Col","xs","ref","Button","onClick","ageData","genderData","nationData","axios","get","then","res","data","count","probability","Information","Modal","aria-labelledby","show","onHide","size","Header","closeButton","Title","Body","map","key","uuid","country_id","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.212672e9.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\r\n\r\nexport const InformationContext = createContext();\r\n\r\nexport default function InformationProvider(props) {\r\n  let [showInfo, setShowInfo] = useState(false);\r\n  let [info, setInfo] = useState({\r\n    name: '',\r\n    age: '',\r\n    ageCount: '',\r\n    gender: '',\r\n    genderProbability: '',\r\n    genderCount: '',\r\n    country: []\r\n  });\r\n  return (\r\n    <InformationContext.Provider value={[info, setInfo, showInfo, setShowInfo]}>\r\n      {props.children}\r\n    </InformationContext.Provider>\r\n  );\r\n}\r\n","import React, { useContext, useRef } from 'react';\r\nimport { Button, Container, Row, Col } from 'react-bootstrap';\r\nimport { InformationContext } from '../contexts/InformationContext';\r\nimport axios from 'axios';\r\nimport '../styles/form.scss';\r\n\r\nconst Form = () => {\r\n  let [, setInfo, , setShowInfo] = useContext(InformationContext);\r\n\r\n  let inputRef = useRef();\r\n  let getInput = () => inputRef.current.value;\r\n\r\n  let onSubmit = () => {\r\n    if (getInput() !== '') {\r\n      setShowInfo(true);\r\n\r\n      let ageData;\r\n      let genderData;\r\n      let nationData;\r\n      axios\r\n        .get(`https://api.agify.io?name=${getInput()}`)\r\n        .then(res => {\r\n          ageData = {\r\n            name: res.data.name,\r\n            age: res.data.age,\r\n            ageCount: res.data.count\r\n          };\r\n          return axios.get(`https://api.genderize.io?name=${getInput()}`);\r\n        })\r\n        .then(res => {\r\n          genderData = {\r\n            gender: res.data.gender,\r\n            genderProbability: res.data.probability,\r\n            genderCount: res.data.count\r\n          };\r\n          return axios.get(`https://api.nationalize.io?name=${getInput()}`);\r\n        })\r\n        .then(res => {\r\n          nationData = {\r\n            // array of objects {country_id: \" \" probability: \" \"}\r\n            country: res.data.country\r\n          };\r\n          setInfo({ ...ageData, ...genderData, ...nationData });\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container fluid={true} className='text-center' id='form_wrapper'>\r\n      <Row>\r\n        <Col xs={12}>\r\n          <h4 className='text-danger'>Enter First Name:</h4>\r\n          <input ref={inputRef} className='p-1 mb-2'></input>\r\n        </Col>\r\n        <Col xs={12}>\r\n          <Button onClick={onSubmit}>See Information</Button>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { useContext } from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { InformationContext } from '../contexts/InformationContext';\r\nimport uuid from 'uuid';\r\n\r\nexport default function Information() {\r\n  let [info, , showInfo, setShowInfo] = useContext(InformationContext);\r\n\r\n  let handleClose = () => {\r\n    setShowInfo(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        aria-labelledby='contained-modal-title-vcenter'\r\n        show={showInfo}\r\n        onHide={handleClose}\r\n        size='lg'\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title\r\n            id='contained-modal-title-vcenter'\r\n            className='text-capitalize'\r\n          >\r\n            Results for <span className='text-success'>{info.name}</span>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className='lead'>\r\n          <p className='font-weight-bold'>Age: {info.age}</p>\r\n          <p>Count: {info.ageCount}</p>\r\n          <hr></hr>\r\n          <p className='font-weight-bold'>Gender: {info.gender}</p>\r\n          <p>Probability: {info.genderProbability * 100}%</p>\r\n          <p>Count: {info.genderCount}</p>\r\n          <hr></hr>\r\n          <p className='font-weight-bold'>Nationality</p>\r\n          <div>\r\n            {info.country.map(country => (\r\n              <span key={uuid()}>\r\n                <p>Country: {country.country_id}</p>\r\n                <p>Probability: {country.probability * 100}%</p>\r\n              </span>\r\n            ))}\r\n          </div>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer></Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport Form from './components/Form';\nimport InformationModal from './components/InformationModal';\nimport InformationProvider from './contexts/InformationContext';\n\nfunction App() {\n  return (\n    <InformationProvider>\n      <Form />\n      <InformationModal></InformationModal>\n    </InformationProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}